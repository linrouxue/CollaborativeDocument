generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_document {
  id                Int      @id @default(autoincrement())
  knowledge_base_id Int
  parent_id         Int
  user_id           Int
  title             String?  @db.VarChar(200)
  cover             String?  @db.VarChar(255)
  content           Bytes?   @db.MediumBlob
  create_time       DateTime @db.DateTime(0)
  update_time       DateTime @db.DateTime(0)
  del_flag          Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_document_comment {
  id              Int      @id @default(autoincrement())
  user_id         Int
  document_id     Int
  comment_content String   @db.Text
  parent_id       Int?
  create_time     DateTime @db.DateTime(0)
  update_time     DateTime @db.DateTime(0)
  del_flag        Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_document_permission {
  id          Int      @id
  user_id     Int
  document_id Int
  permission  Int
  create_time DateTime @db.DateTime(0)
  update_time DateTime @db.DateTime(0)
  del_flag    Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_document_version {
  id          Int       @id @default(autoincrement())
  document_id Int
  user_id     Int
  title       String    @db.VarChar(200)
  content     String    @db.LongText
  version     String    @db.VarChar(50)
  create_time DateTime? @db.DateTime(0)
  update_time DateTime? @db.DateTime(0)
  del_flag    Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_knowledge_base {
  id          Int      @id @default(autoincrement())
  user_id     Int
  name        String   @db.VarChar(100)
  description String?  @db.Text
  img         String?  @db.VarChar(255)
  create_time DateTime @db.DateTime(0)
  update_time DateTime @db.DateTime(0)
  del_flag    Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_knowledge_base_permission {
  id                Int       @id @default(autoincrement())
  knowledge_base_id Int?
  user_id           Int?
  permission        Int?
  create_time       DateTime? @db.DateTime(0)
  update_time       DateTime? @db.DateTime(0)
  del_flag          Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_recent_access {
  id          Int      @id @default(autoincrement())
  user_id     Int
  document_id Int
  access_time DateTime @db.DateTime(0)
  create_time DateTime @db.DateTime(0)
  update_time DateTime @db.DateTime(0)
  del_flag    Int
}

model t_user {
  id              Int               @id @default(autoincrement())
  email           String            @unique(map: "email") @db.VarChar(100)
  password        String            @db.VarChar(100)
  username        String?           @db.VarChar(50)
  avatar          String?           @db.VarChar(255)
  phone           String?           @db.VarChar(20)
  create_time     DateTime          @db.DateTime(0)
  update_time     DateTime          @db.DateTime(0)
  del_flag        Int
  t_refresh_token t_refresh_token[]
}

/// 验证码表 - 用于存储邮箱验证码
model t_captcha {
  id          Int       @id @default(autoincrement())
  email       String    @db.VarChar(255)
  captcha     String    @db.VarChar(10)
  expires_at  DateTime  @db.DateTime(0)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  create_time DateTime? @db.DateTime(0)
  update_time DateTime? @db.DateTime(0)
  del_flag    Int?

  @@index([email], map: "idx_email")
  @@index([expires_at], map: "idx_expires_at")
}

model t_refresh_token {
  id           String    @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  hashed_token String    @unique(map: "hashed_token") @db.VarChar(255)
  user_id      Int
  is_revoked   Boolean   @default(false)
  expires_at   DateTime  @db.DateTime(0)
  jti          String    @unique(map: "jti") @db.VarChar(255)
  create_time  DateTime? @db.DateTime(0)
  update_time  DateTime? @db.DateTime(0)
  del_flag     Int?
  t_user       t_user    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_refresh_token_user")

  @@index([user_id], map: "fk_refresh_token_user")
}

model t_document_base {
  id Int @id @default(autoincrement())
}
